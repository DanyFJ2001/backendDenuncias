package com.Denuncias.denuncias.Controlador;

import com.Denuncias.denuncias.Entidad.Denuncia;
import com.Denuncias.denuncias.Entidad.Usuario;
import com.Denuncias.denuncias.Servicio.DenunciaServicio;
import com.Denuncias.denuncias.Servicio.UsuarioServicio;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/denuncias")
@CrossOrigin(origins = "*")
public class DenunciasControlador {

    @Autowired
    private DenunciaServicio denunciaServicio;

    @Autowired
    private UsuarioServicio usuarioServicio;

    @GetMapping("/test")
    public String test() {
        return "API de denuncias funcionando correctamente";
    }

    @GetMapping("/mostrar")
    public List<Denuncia> mostrarDenuncias() {
        return denunciaServicio.mostrarDenuncias();
    }

    @GetMapping("/buscar/{tipo}")
    public List<Denuncia> buscarPorTipo(@PathVariable String tipo) {
        return denunciaServicio.buscarDenunciaPorTipo(tipo);
    }

    @GetMapping("/usuario/{usuarioId}")
    public List<Denuncia> buscarPorUsuario(@PathVariable Long usuarioId) {
        return denunciaServicio.buscarDenunciasPorUsuarioId(usuarioId);
    }

    @GetMapping("/estado/{estado}")
    public List<Denuncia> buscarPorEstado(@PathVariable Denuncia.EstadoDenuncia estado) {
        return denunciaServicio.buscarDenunciasPorEstado(estado);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Denuncia> buscarPorId(@PathVariable Long id) {
        Optional<Denuncia> denuncia = denunciaServicio.buscarDenunciaId(id);

        if (denuncia.isPresent()) {
            return ResponseEntity.ok(denuncia.get());
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @PostMapping("/guardar")
    public ResponseEntity<Denuncia> guardarDenuncia(@RequestBody Denuncia denuncia) {
        // Verificar que el usuario existe
        if (denuncia.getUsuario() != null && denuncia.getUsuario().getId() != null) {
            Optional<Usuario> usuario = usuarioServicio.buscarUsuarioId(denuncia.getUsuario().getId());

            if (!usuario.isPresent()) {
                return ResponseEntity.badRequest().build();
            }

            denuncia.setUsuario(usuario.get());
        } else {
            return ResponseEntity.badRequest().build();
        }

        // Establecer valores iniciales
        denuncia.setFechaCreacion(LocalDateTime.now());
        denuncia.setEstado(Denuncia.EstadoDenuncia.PENDIENTE);

        denunciaServicio.guardarDenuncia(denuncia);
        return ResponseEntity.status(HttpStatus.CREATED).body(denuncia);
    }

    @PostMapping("/guardarConEvidencia")
    public ResponseEntity<Denuncia> guardarDenunciaConEvidencia(
            @RequestParam("tipo") String tipo,
            @RequestParam("ubicacion") String ubicacion,
            @RequestParam("descripcion") String descripcion,
            @RequestParam("contacto") String contacto,
            @RequestParam("usuarioId") Long usuarioId,
            @RequestParam(value = "evidencia", required = false) MultipartFile evidencia) {

        // Verificar que el usuario existe
        Optional<Usuario> usuario = usuarioServicio.buscarUsuarioId(usuarioId);
        if (!usuario.isPresent()) {
            return ResponseEntity.badRequest().build();
        }

        Denuncia denuncia = new Denuncia();
        denuncia.setTipo(tipo);
        denuncia.setUbicacion(ubicacion);
        denuncia.setDescripcion(descripcion);
        denuncia.setContacto(contacto);
        denuncia.setUsuario(usuario.get());
        denuncia.setFechaCreacion(LocalDateTime.now());
        denuncia.setEstado(Denuncia.EstadoDenuncia.PENDIENTE);

        // Aquí se manejaría la lógica para guardar el archivo de evidencia
        // y asignar la URL correspondiente a la denuncia

        denunciaServicio.guardarDenuncia(denuncia);
        return ResponseEntity.status(HttpStatus.CREATED).body(denuncia);
    }

    @PutMapping("/actualizar/{id}")
    public ResponseEntity<Denuncia> actualizarDenuncia(@PathVariable Long id, @RequestBody Denuncia denunciaData) {
        Optional<Denuncia> denunciaOptional = denunciaServicio.buscarDenunciaId(id);

        if (!denunciaOptional.isPresent()) {
            return ResponseEntity.notFound().build();
        }

        Denuncia denuncia = denunciaOptional.get();

        // Actualizar los campos
        denuncia.setTipo(denunciaData.getTipo());
        denuncia.setUbicacion(denunciaData.getUbicacion());
        denuncia.setDescripcion(denunciaData.getDescripcion());
        denuncia.setContacto(denunciaData.getContacto());

        // Si se está actualizando el estado
        if (denunciaData.getEstado() != null) {
            denuncia.setEstado(denunciaData.getEstado());
        }

        // Actualizar la fecha de actualización
        denuncia.setFechaActualizacion(LocalDateTime.now());

        denunciaServicio.guardarDenuncia(denuncia);
        return ResponseEntity.ok(denuncia);
    }

    @PutMapping("/cambiarEstado/{id}")
    public ResponseEntity<Denuncia> cambiarEstadoDenuncia(@PathVariable Long id, @RequestParam Denuncia.EstadoDenuncia estado) {
        Optional<Denuncia> denunciaOptional = denunciaServicio.buscarDenunciaId(id);

        if (!denunciaOptional.isPresent()) {
            return ResponseEntity.notFound().build();
        }

        Denuncia denuncia = denunciaOptional.get();
        denuncia.setEstado(estado);
        denuncia.setFechaActualizacion(LocalDateTime.now());

        denunciaServicio.guardarDenuncia(denuncia);
        return ResponseEntity.ok(denuncia);
    }

    @DeleteMapping("/eliminar/{id}")
    public ResponseEntity<Void> eliminarDenuncia(@PathVariable Long id) {
        Optional<Denuncia> denunciaOptional = denunciaServicio.buscarDenunciaId(id);

        if (!denunciaOptional.isPresent()) {
            return ResponseEntity.notFound().build();
        }

        denunciaServicio.eliminarDenuncia(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/pdf")
    public ResponseEntity<byte[]> generarPdfDenuncias() {
        try {
            byte[] pdfBytes = denunciaServicio.generarPdfDenuncias();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("filename", "listado-denuncias.pdf");

            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    @GetMapping("/pdf/{id}")
    public ResponseEntity<byte[]> generarPdfDenunciaDetalle(@PathVariable Long id) {
        try {
            byte[] pdfBytes = denunciaServicio.generarPdfDenunciaDetalle(id);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_PDF);
            headers.setContentDispositionFormData("filename", "denuncia-" + id + ".pdf");

            return new ResponseEntity<>(pdfBytes, headers, HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}